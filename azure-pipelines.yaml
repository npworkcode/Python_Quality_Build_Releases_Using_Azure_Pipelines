name: Azure Pipelines

trigger: none

variables:
- group: Quality_Release_SSH_Info
- name: python.version
  value: '3.7'

pool:
  vmImage: 'ubuntu-latest'
  
stages:

- stage: Build

  jobs:

  - job: Build



    steps:
 



    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi


- stage: Deploy

  jobs:



  - deployment: VMDeploy
    displayName: 'QA for Website'
    environment:
      name: 'QA'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          # SSH Key Needed for VM Admin tasks
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: $(KNOWN_HOSTS)
              sshPublicKey: '$(aps-tf-public-key)'
              sshPassphrase: '$(aps-passphrase)'
              sshKeySecureFile: 'id_rsa'
            env:
              KNOWN_HOSTS   : $(aps-known-host)







          - task: Bash@3
            displayName: "Install Chromedriver on VM & Run Selenium QA Tests"
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
          
                sudo apt-get upgrade -y
                sudo apt-get install python$(python.version) -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                a=$(uname -m)
                mkdir /tmp/chromedriver/
                wget -O /tmp/chromedriver/LATEST_RELEASE https://chromedriver.storage.googleapis.com/LATEST_RELEASE
                if [ $a == i686 ]; then b=32; elif [ $a == x86_64 ]; then b=64; fi 
                latest=$(cat /tmp/chromedriver/LATEST_RELEASE)
                wget -O /tmp/chromedriver/chromedriver.zip 'http://chromedriver.storage.googleapis.com/'$latest'/chromedriver_linux'$b'.zip' 
                unzip -o /tmp/chromedriver/chromedriver.zip chromedriver -d /home/adminuser/chromedriver 
                sudo chmod 0775 /home/adminuser/chromedriver
                export PATH=$PATH:/home/adminuser/chromedriver >> ~/.profile
                echo $PATH
                mkdir /home/adminuser/logs
                touch /home/adminuser/logs/loginapp.log
                sudo chmod a+rw /home/adminuser/logs/loginapp.log
                mkdir /home/adminuser/scripts
                sudo cp $(Build.SourcesDirectory)/login.py /home/adminuser/scripts
                sudo chmod 0775 /home/adminuser/scripts/login.py
                python3 /home/adminuser/scripts/login.py


- stage: Test
  variables:
  - name: POSTMANSRCDIR
    value: $(Build.SourcesDirectory)/automatedtesting/postman/
  - name: POSTMANREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/postman/report/
  - name: JMENDURETESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance
  - name: JMENDURETESTREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/endurance/report
  - name: JMENDURETESTINDEXDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/endurance/index
  - name: JMESTRESSTESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress
  - name: JMSTRESSTESTREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/stress/report
  - name: JMSTRESSTESTINDEXDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/stress/index

  jobs:

  - job: PerformQATests

    steps:
    
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        addToPath: true
        architecture: 'x64'

    - task: CmdLine@2
      displayName: "Install Newman Runner, HTML & HTMLExtra Reporter"
      inputs:
        script: |
          sudo npm install -g newman 
          sudo npm install -g newman-reporter-html
          sudo npm install -g newman-reporter-htmlextra
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: "Run Postman Data Validation Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Azure_FakeRESTApi_Data_Validation_Tests.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/datavalidationhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/datavalidationjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/datavalidationhtmlextratests.html
        workingDirectory: '$(Build.ArtifactStagingDirectory)'

    - task: PublishTestResults@2
      displayName: "Publish Postman Data Validation Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/datavalidationjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'


    - task: UploadPostmanHtmlReport@1
      inputs:
        cwd: '$POSTMANREPORTDIR/html/datavalidationhtmltests.html'
        tabName: 'Data Validation HTML'


    - task: UploadPostmanHtmlReport@1
      inputs:
        cwd: '$POSTMANREPORTDIR/htmlextra/datavalidationhtmlextratests.html'
        tabName: 'Data Validation HTMLExtra'


    - task: CmdLine@2
      displayName: "Run Postman Regression Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Azure_FakeRESTApi_Regression_Tests.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/regressionhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/regressionjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/regressionhtmlextratests.html
        workingDirectory: '$(System.DefaultWorkingDirectory)'


    - task: PublishTestResults@2
      displayName: "Publish Postman Regression Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/regressionjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'

    - task: UploadPostmanHtmlReport@1
      inputs:
        cwd: '$POSTMANREPORTDIR/html/regressionhtmltests.html'
        tabName: 'Data Regression HTML'


    - task: UploadPostmanHtmlReport@1
      inputs:
        cwd: '$POSTMANREPORTDIR/htmlextra/regressionhtmlextratests.html'
        tabName: 'Data Regression HTMLExtra'


