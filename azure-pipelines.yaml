name: Azure Pipelines

trigger: none

variables:
- group: Quality_Release_SSH_Info
- name: python.version
  value: '3.7'

pool:
  vmImage: 'ubuntu-16.04'
  
stages:



- stage: Test
  variables:
  - name: POSTMANSRCDIR
    value: $(Build.SourcesDirectory)/automatedtesting/postman/
  - name: POSTMANREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/postman/report/
  - name: JMENDURETESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance
  - name: JMENDURETESTREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/endurance/report
  - name: JMENDURETESTINDEXDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/endurance/index
  - name: JMESTRESSTESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress
  - name: JMSTRESSTESTREPORTDIR
    value: $(Build.ArtifactStagingDirectoryy)/automatedtesting/jmeter/stress/report
  - name: JMSTRESSTESTINDEXDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/stress/index

  jobs:

  - job: PerformQATests

    steps:
    
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        addToPath: true
        architecture: 'x64'

    - task: CmdLine@2
      displayName: "Install Newman Runner, HTML & HTMLExtra Reporter"
      inputs:
        script: |
          sudo npm install -g newman 
          sudo npm install -g newman-reporter-html
          sudo npm install -g newman-reporter-htmlextra
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: "Run Postman Data Validation Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Data_Validation_Tests_Fake_API.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/datavalidationhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/datavalidationjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/datavalidationhtmlextratests.html
        workingDirectory: '$(Build.ArtifactStagingDirectory)'

    - task: PublishTestResults@2
      displayName: "Publish Postman Data Validation Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/datavalidationjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'

    - task: CmdLine@2
      displayName: "Run Postman Regression Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Regression_Tests_Fake_API.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/regressionhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/regressionjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/regressionhtmlextratests.html
        workingDirectory: '$(System.DefaultWorkingDirectory)'


    - task: PublishTestResults@2
      displayName: "Publish Postman Regression Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/regressionjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'


    - task: JMeterInstaller@0
      displayName: "Install JMeter"
      inputs:
        jmeterVersion: '5.4.1'


    - task: TaurusInstaller@0
      displayName: "Install Taurus Tool Runner"
      inputs:
        taurusVersion: '1.15.2'
        pythonCommand: 'python3'


    - task: TaurusRunner@0
      displayName: "Run JMeter Endurance Tests with Taurus"
      inputs:
        taurusConfig: |
          modules:
            jmeter:
              cmdline: -j endurance.log -e -o $(JMENDURETESTINDEXDIR)
          execution:
          - scenario:
                script: $(JMENDURETESTDIR)/Project_3-Endurance-Test_Plan.jmx
          
          reporting:
          - module: junit-xml
            filename: $(JMENDURETESTREPORTDIR)/endurance.xml
        jmeterHome: '$(JMeterInstaller.JMeterHome)'
        jmeterPath: '$(JMeterInstaller.JMeterPath)'
        jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
        outputDir: $JMENDURETESTREPORTDIR'


    - task: PublishTestResults@2
      displayName: "Publish JMeter Endurance Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(JMENDURETESTREPORTDIR)/endurance.xml'
        searchFolder: '$(JMENDURETESTREPORTDIR)'
        testRunTitle: 'JMeter Endurance Tests of FAKE API'
    - task: TaurusRunner@0
      displayName: "Run JMeter Stress Tests"
      inputs:
        taurusConfig: |
          modules:
            jmeter:
              cmdline: -j stress.log -e -o $(JMSTRESSTESTINDEXDIR)
        
          execution:
          - scenario:
                script: $(JMESTRESSTESTDIR)/Project_3-Stress-Test_Plan.jmx
          
          
          reporting:
          - module: junit-xml
            filename: $(JMSTRESSTESTREPORTDIR)/stress.xml
        jmeterHome: '$(JMeterInstaller.JMeterHome)'
        jmeterPath: '$(JMeterInstaller.JMeterPath)'
        jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
        outputDir: $JMSTRESSTESTREPORTDIR'


    - task: PublishTestResults@2
      displayName: "Publish JMeter Stress Tests Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(JMSTRESSTESTREPORTDIR)/stress.xml'
        searchFolder: '$(JMSTRESSTESTREPORTDIR)'
        testRunTitle: 'JMeter Stress Tests of FAKE API'