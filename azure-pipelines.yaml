name: Azure Pipelines

trigger: none

variables:
- group: Quality_Release_SSH_Info
- name: python.version
  value: '3.7.6'

  
stages:

- stage: Build

  jobs:

  - job: Build

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    # Needed for Terraform VM deployment

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$KNOWN_HOSTS_STRING'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDvKIH4Oxhb4hwfl/+E0HLrMS5QEjYGRLRNuKzSHzGFJ+u4BFyC4OqyhY5JRvlOgMGyzDLEXnzvp2lWiYJRoorZEuKI/7bpJ//tuEnvoAGmugutGUDDiUbtqRNGqezBoMI4rstrqz4Tbtj/yYSQDBrkUGrHiC/WxHelEycnimqDuZ9aK5hWdpxRYJK8bAflkU29svwN2XG9cKMLSdxSG1vRqouy4+hOd8lu9jkgHA9VJ+iQLmgQYhK7YpTmCPWKSuf4+Blgk9slqTF7ESa6N/Qqm+TJsJgozxvWLuGh2RTZWd15HJZTxRGFJ1W7Z0DMpYAtrQOAhFrtBnXVNQcvx/L4WxpmtXbKwXMo9K/2tECi5jZnbJ9i1xXXBl6zHEHwMqNQGff1BRt37yqqtfV6qgB6/Tu0OxERGsF+k0gRg0rpa6zweSJKAqIZosNsuvnexGwuOeaQcHrvwZHriELMstF4mH2R9ESyoPjMW+JZBsYmhNzoEsZDDPXkXq5iq+zrg//hwCqDd7IgOAbs2buDrFaBoLjIRXYa90ZuiXgbLhc+X3RVK2tA5LQDRGAOkgSEaaC7Hi8BNOyMI8j/o7hnjkAu/Y3PFTodh8OoQ/omuAkz3ehC+lOrOFUAehRIAoRJtMS5QEFF2sBGKGrWZQUq8do462d6tXUUWezCWeRstoYUSQ== np_3000@hotmail.com'
        sshKeySecureFile: 'deploy_key'
      env:
        KNOWN_HOSTS_STRING: $(aps-known-host)
        PUBLIC_KEY        : $(aps-tf-public-key)

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
      


- stage: Deploy

  jobs:
  - deployment: FakeRESTAPI
    displayName: 'Deploy Faker API to VM'

    pool:
      vmImage: 'ubuntu-16.04'
    
    environment: 
      name: 'Test'

    strategy:
      runOnce:
        preDeploy:
          steps:
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: '$KNOWN_HOSTS_STRING'
              sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDvKIH4Oxhb4hwfl/+E0HLrMS5QEjYGRLRNuKzSHzGFJ+u4BFyC4OqyhY5JRvlOgMGyzDLEXnzvp2lWiYJRoorZEuKI/7bpJ//tuEnvoAGmugutGUDDiUbtqRNGqezBoMI4rstrqz4Tbtj/yYSQDBrkUGrHiC/WxHelEycnimqDuZ9aK5hWdpxRYJK8bAflkU29svwN2XG9cKMLSdxSG1vRqouy4+hOd8lu9jkgHA9VJ+iQLmgQYhK7YpTmCPWKSuf4+Blgk9slqTF7ESa6N/Qqm+TJsJgozxvWLuGh2RTZWd15HJZTxRGFJ1W7Z0DMpYAtrQOAhFrtBnXVNQcvx/L4WxpmtXbKwXMo9K/2tECi5jZnbJ9i1xXXBl6zHEHwMqNQGff1BRt37yqqtfV6qgB6/Tu0OxERGsF+k0gRg0rpa6zweSJKAqIZosNsuvnexGwuOeaQcHrvwZHriELMstF4mH2R9ESyoPjMW+JZBsYmhNzoEsZDDPXkXq5iq+zrg//hwCqDd7IgOAbs2buDrFaBoLjIRXYa90ZuiXgbLhc+X3RVK2tA5LQDRGAOkgSEaaC7Hi8BNOyMI8j/o7hnjkAu/Y3PFTodh8OoQ/omuAkz3ehC+lOrOFUAehRIAoRJtMS5QEFF2sBGKGrWZQUq8do462d6tXUUWezCWeRstoYUSQ== np_3000@hotmail.com'
              sshKeySecureFile: 'deploy_key'
            env:
              KNOWN_HOSTS_STRING: $(aps-known-host)
              PUBLIC_KEY        : $(aps-tf-public-key)
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'PythonAppSC'
              appName: 'Python-Linux-app'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

        on:
          failure:
            steps:
              - script: echo Fake REST API was not deployed
          success:
            steps:
              - script: echo Fake REST API deployed successfully

  - deployment: VMDeploy
    displayName: 'QA for Website'
    environment:
      name: 'QA'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Bash@3
            displayName: "Install Chromedriver on VM"
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
          
                sudo apt-get upgrade -y
                sudo apt-get install python$(python.version)
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                a=$(uname -m)
                rm -r /tmp/chromedriver/
                mkdir /tmp/chromedriver/
                wget -O /tmp/chromedriver/LATEST_RELEASE https://chromedriver.storage.googleapis.com/LATEST_RELEASE
                if [ $a == i686 ]; then b=32; elif [ $a == x86_64 ]; then b=64; fi 
                latest=$(cat /tmp/chromedriver/LATEST_RELEASE)
                wget -O /tmp/chromedriver/chromedriver.zip 'http://chromedriver.storage.googleapis.com/'$latest'/chromedriver_linux'$b'.zip' 
                sudo unzip /tmp/chromedriver/chromedriver.zip chromedriver -d /usr/local/bin/ 
                sudo chown root:root /usr/local/bin/chromedriver
                sudo chmod 0755 /usr/local/bin/chromedriver
                export PATH=$PATH:/usr/local/bin/chromedriver >> ~/.profile
          - task: Bash@3
            displayName: 'Run Selenium QA Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo mkdir /var/logs
                sudo mkdir ~/scripts
                sudo cp $(Build.SourcesDirectory)/login.py ~/scripts
                sudo python3 ~/scripts/login.py

        on:
          failure:
            steps:
            - script: echo Selenium QA Tests were not completed
          success:
            steps:
            - script: echo Selenium QA Tests completed successfully

- stage: Test
  variables:
  - name: POSTMANSRCDIR
    value: $(Build.SourcesDirectory)/automatedtesting/postman
  - name: POSTMANREPORTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/postman/report
  - name: JMENDURETESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance
  - name: JMENDURETESTREPORTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance/report
  - name: JMENDURETESTINDEXDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance/index
  - name: JMESTRESSTESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress
  - name: JMSTRESSTESTREPORTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress/report
  - name: JMSTRESSTESTINDEXDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress/index

  jobs:

  - job: PerformQATests

    pool:
      vmImage: 'ubuntu-latest'


    steps:
    
    - checkout: self
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$KNOWN_HOSTS_STRING'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDvKIH4Oxhb4hwfl/+E0HLrMS5QEjYGRLRNuKzSHzGFJ+u4BFyC4OqyhY5JRvlOgMGyzDLEXnzvp2lWiYJRoorZEuKI/7bpJ//tuEnvoAGmugutGUDDiUbtqRNGqezBoMI4rstrqz4Tbtj/yYSQDBrkUGrHiC/WxHelEycnimqDuZ9aK5hWdpxRYJK8bAflkU29svwN2XG9cKMLSdxSG1vRqouy4+hOd8lu9jkgHA9VJ+iQLmgQYhK7YpTmCPWKSuf4+Blgk9slqTF7ESa6N/Qqm+TJsJgozxvWLuGh2RTZWd15HJZTxRGFJ1W7Z0DMpYAtrQOAhFrtBnXVNQcvx/L4WxpmtXbKwXMo9K/2tECi5jZnbJ9i1xXXBl6zHEHwMqNQGff1BRt37yqqtfV6qgB6/Tu0OxERGsF+k0gRg0rpa6zweSJKAqIZosNsuvnexGwuOeaQcHrvwZHriELMstF4mH2R9ESyoPjMW+JZBsYmhNzoEsZDDPXkXq5iq+zrg//hwCqDd7IgOAbs2buDrFaBoLjIRXYa90ZuiXgbLhc+X3RVK2tA5LQDRGAOkgSEaaC7Hi8BNOyMI8j/o7hnjkAu/Y3PFTodh8OoQ/omuAkz3ehC+lOrOFUAehRIAoRJtMS5QEFF2sBGKGrWZQUq8do462d6tXUUWezCWeRstoYUSQ== np_3000@hotmail.com'
        sshKeySecureFile: 'deploy_key'
      env:
        KNOWN_HOSTS_STRING: $(aps-known-host)
        PUBLIC_KEY        : $(aps-tf-public-key)

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7.6'
        addToPath: true
        architecture: 'x64'

    - task: CmdLine@2
      displayName: "Install Newman Runner, HTML & HTMLExtra Reporter"
      inputs:
        script: |
          sudo npm install -g newman 
          sudo npm install -g newman-reporter-html
          sudo npm install -g newman-reporter-htmlextra
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: "Run Postman Data Validation Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Data_Validation_Tests_Fake_API.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/datavalidationhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/datavalidationjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/datavalidationhtmlextratests.html
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: PublishTestResults@2
      displayName: "Publish Postman Data Validation Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$POSTMANREPORTDIR/junit/datavalidationjunittests.xml'
        searchFolder: '$POSTMANREPORTDIR/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'

    - task: CmdLine@2
      displayName: "Run Postman Regression Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Regression_Tests_Fake_API.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 --bail \
            --reporters cli,html,htmlextra,junit  \
            --reporter-html-export $POSTMANREPORTDIR/html/regressionhtmltests.html \
            --reporter-junit-export $POSTMANREPORTDIR/junit/regressionjunittests.xml \
            --reporter-htmlextra-export $POSTMANREPORTDIR/htmlextra/regressionhtmlextratests.html
        workingDirectory: '$(System.DefaultWorkingDirectory)'


    - task: PublishTestResults@2
      displayName: "Publish Postman Regression Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$POSTMANREPORTDIR/junit/regressionjunittests.xml'
        searchFolder: '$POSTMANREPORTDIR/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'


    - task: JMeterInstaller@0
      displayName: "Install JMeter"
      inputs:
        jmeterVersion: '5.4.1'


    - task: TaurusInstaller@0
      displayName: "Install Taurus Tool Runner"
      inputs:
        taurusVersion: '1.15.2'
        pythonCommand: 'python3'


    - task: TaurusRunner@0
      displayName: "Run JMeter Endurance Tests with Taurus"
      inputs:
        taurusConfig: |
          modules:
            jmeter:
              cmdline: -j endurance.log -e -o $JMENDURETESTINDEXDIR
          execution:
          - scenario:
                script: $JMENDURETESTDIR/Project_3-Endurance-Test_Plan.jmx
          
          reporting:
          - module: junit-xml
            filename: $JMENDURETESTREPORTDIR/endurance.xml
        jmeterHome: '$(JMeterInstaller.JMeterHome)'
        jmeterPath: '$(JMeterInstaller.JMeterPath)'
        jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
        outputDir: $JMENDURETESTREPORTDIR'


    - task: PublishTestResults@2
      displayName: "Publish JMeter Endurance Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$JMENDURETESTREPORTDIR/endurance.xml'
        searchFolder: '$JMENDURETESTREPORTDIR'
        testRunTitle: 'JMeter Endurance Tests of FAKE API'
    - task: TaurusRunner@0
      displayName: "Run JMeter Stress Tests"
      inputs:
        taurusConfig: |
          modules:
            jmeter:
              cmdline: -j stress.log -e -o $JMSTRESSTESTINDEXDIR
        
          execution:
          - scenario:
                script: $JMESTRESSTESTDIR/Project_3-Stress-Test_Plan.jmx
          
          
          reporting:
          - module: junit-xml
            filename: $JMSTRESSTESTREPORTDIR/stress.xml
        jmeterHome: '$(JMeterInstaller.JMeterHome)'
        jmeterPath: '$(JMeterInstaller.JMeterPath)'
        jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
        outputDir: $JMSTRESSTESTREPORTDIR'


    - task: PublishTestResults@2
      displayName: "Publish JMeter Stress Tests Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$JMSTRESSTESTREPORTDIR/stress.xml'
        searchFolder: '$JMSTRESSTESTREPORTDIR'
        testRunTitle: 'JMeter Stress Tests of FAKE API'