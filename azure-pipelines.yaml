name: Azure Pipelines

trigger: none

variables:
- group: Quality_Release_SSH_Info
- name: python.version
  value: '3.7'

pool:
  vmImage: 'ubuntu-latest'
  
stages:

- stage: Build

  jobs:

  - job: Build



    steps:
 



    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi


- stage: Deploy

  jobs:



  - deployment: VMDeploy
    displayName: 'QA for Website'
    environment:
      name: 'QA'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          # SSH Key Needed for VM Admin tasks
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: $(KNOWN_HOSTS)
              sshPublicKey: '$(aps-tf-public-key)'
              sshPassphrase: '$(aps-passphrase)'
              sshKeySecureFile: 'id_rsa'
            env:
              KNOWN_HOSTS   : $(aps-known-host)

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'SPSC'
              appType: 'webAppLinux'
              WebAppName: 'python-linux-app'
              deployToSlotOrASE: true
              ResourceGroupName: 'projectrg'
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              RuntimeStack: 'DOTNETCORE|5.0'
              AppSettings: '-WEBSITE_RUN_FROM_PACKAGE 0'
              enableCustomDeployment: true
              DeploymentType: webDeploy


          - task: Bash@3
            displayName: "Install Chromedriver on VM"
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
          
                sudo apt-get upgrade -y
                sudo apt-get install python$(python.version) -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                a=$(uname -m)
                mkdir /tmp/chromedriver/
                wget -O /tmp/chromedriver/LATEST_RELEASE https://chromedriver.storage.googleapis.com/LATEST_RELEASE
                if [ $a == i686 ]; then b=32; elif [ $a == x86_64 ]; then b=64; fi 
                latest=$(cat /tmp/chromedriver/LATEST_RELEASE)
                wget -O /tmp/chromedriver/chromedriver.zip 'http://chromedriver.storage.googleapis.com/'$latest'/chromedriver_linux'$b'.zip' 
                unzip -o /tmp/chromedriver/chromedriver.zip chromedriver -d /home/adminuser/chromedriver 
                sudo chmod 0775 /home/adminuser/chromedriver


          - task: Bash@3
            displayName: 'Run Selenium QA Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                export PATH=$PATH:/home/adminuser/chromedriver >> ~/.profile
                echo $PATH
                mkdir /home/adminuser/logs
                touch /home/adminuser/logs/loginapp.log
                sudo chmod a+rw /home/adminuser/logs/loginapp.log
                mkdir /home/adminuser/scripts
                sudo cp $(Build.SourcesDirectory)/login.py /home/adminuser/scripts
                sudo chmod 0775 /home/adminuser/scripts/login.py
                python3 /home/adminuser/scripts/login.py


        on:
          failure:
            steps:
            - script: echo 'Deployment of WebApp & Selenium QA Tests were not completed'
          success:
            steps:
            - script: echo 'Deployment of WebApp & Selenium QA Tests completed successfully'

- stage: Test
  variables:
  - name: POSTMANSRCDIR
    value: $(Build.SourcesDirectory)/automatedtesting/postman/
  - name: POSTMANREPORTDIR
    value: $(Build.ArtifactStagingDirectory)/automatedtesting/postman/report/
  - name: JMENDURETESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/endurance
  - name: JMESTRESSTESTDIR
    value: $(Build.SourcesDirectory)/automatedtesting/jmeter/stress


  jobs:

  - job: PerformQATests

    steps:
    
    - checkout: self

    - task: UsePythonVersion@0
      displayName: "Install Python"
      inputs:
        versionSpec: '$(python.version)'
        addToPath: true
        architecture: 'x64'

    - task: CmdLine@2
      displayName: "Install Newman Runner"
      inputs:
        script: |
          sudo npm install -g newman 
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: "Run Postman Data Validation Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Azure_FakeRESTApi_Data_Validation_Tests.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 \
            --reporters cli,junit  \
            --reporter-junit-export $POSTMANREPORTDIR/junit/datavalidationjunittests.xml 
        workingDirectory: '$(Build.ArtifactStagingDirectory)'

    - task: PublishTestResults@2
      displayName: "Publish Postman Data Validation Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/datavalidationjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Validation Tests of FAKE API'



    - task: CmdLine@2
      displayName: "Run Postman Regression Tests"
      continueOnError: true
      inputs:
        script: |
          newman run $POSTMANSRCDIR\Azure_FakeRESTApi_Regression_Tests.json  \
            -e $POSTMANSRCDIR\environment.json -n 1 --verbose --delay-request 2000 \
            --reporters cli,junit  \
            --reporter-junit-export $POSTMANREPORTDIR/junit/regressionjunittests.xml 
        workingDirectory: '$(System.DefaultWorkingDirectory)'


    - task: PublishTestResults@2
      displayName: "Publish Postman Regression Test Results"
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(POSTMANREPORTDIR)/junit/regressionjunittests.xml'
        searchFolder: '$(POSTMANREPORTDIR)/junit'
        testRunTitle: 'Data Regression Tests of FAKE API'

    - task: Bash@3
      displayName: Install JMeter
      inputs:
        targetType: 'inline'
        script: |
          java -version
          wget https://mirrors.gigenet.com/apache//jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
          tar xzvf jmeter.tgz
          apache-jmeter-5.4.1/bin/jmeter --version
          pwd
          ls -la
    - task: Bash@3
      displayName: JMeter Stress Tests for FakeRESTApi website
      inputs:
        targetType: 'inline'
        script: |
          mkdir stressreport
          echo "Made the directory for the Stress Test results - stressreport"
          rm -rf *.csv stressreport/*
          echo "Running JMeter Stress tests Now"
          apache-jmeter-5.4.1/bin/jmeter -n -t $(JMESTRESSTESTDIR)/Project_3-Stress-Test_Plan.jmx \
          -l stress.csv -e -o stressreport/
          mv stress.csv stressreport
          pwd
          ls -la

    - task: ArchiveFiles@2
      displayName: 'Archive Stress Report'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/stressreport'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-stressreport.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-stressreport.zip
      displayName: 'Upload Stress Report Zip'
      artifact: stressreport


    - task: Bash@3
      displayName: JMeter Endurance Tests for FakeRESTAPI website
      inputs:
        targetType: 'inline'
        script: |
          mkdir endurereport
          echo "Made the directory for the Endurance Test results - endurereport"
          rm -rf *.csv endurereport/*
          echo "Running JMeter Endurance tests Now"
          apache-jmeter-5.4.1/bin/jmeter -n -t $(JMENDURETESTDIR)/Project_3-Endurance-Test_Plan.jmx \
          -l endure.jtl -e -o endurereport/
          mv endure.jtl endurereport
          pwd
          ls -la

    - task: ArchiveFiles@2
      displayName: 'Archive Stress Report'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/endurereport'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-endurereport.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-endurereport.zip
      displayName: 'Upload Endurance Tests Report Zip'
      artifact: endurancereport



