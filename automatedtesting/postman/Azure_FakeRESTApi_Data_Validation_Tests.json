{
	"info": {
		"_postman_id": "4ffaa235-40c7-41fa-ac71-ca4dea2ba65b",
		"name": "Azure_FakeRESTApi_Data_Validation_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get - All Activities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Activities\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Verify id of 2nd Activity\", function() {                            \r",
							"    pm.expect(json[1].id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// #5\r",
							"pm.test(\"Verify title of 2nd Activity\", function() {                            \r",
							"    pm.expect(json[1].title).to.eql(\"Activity 2\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Verify completed of 2nd Activity\", function() {                            \r",
							"    pm.expect(json[1].completed).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"// #7\r",
							"pm.test(\"Verify Date of 2nd Activity has a correct format\", function () {\r",
							"    pm.expect(json[1].dueDate).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{7}\\+\\d{2}:\\d{2}$/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - All Authors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Verify id of 2nd Author\", function() {                            \r",
							"    pm.expect(json[1].id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// #5\r",
							"pm.test(\"Verify id of 2nd Author Book\", function() {                            \r",
							"    pm.expect(json[1].idBook).to.eql(1);\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Verify First Name of 2nd Author\", function() {                            \r",
							"    pm.expect(json[1].firstName).to.eql(\"First Name 2\");\r",
							"});\r",
							"\r",
							"\r",
							"// #7\r",
							"pm.test(\"Verify Last Name of 2nd Author\", function () {\r",
							"    pm.expect(json[1].lastName).to.eql(\"Last Name 2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - All Books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Books\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Verify id of 2nd Book\", function() {                            \r",
							"    pm.expect(json[1].id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// #5\r",
							"pm.test(\"Verify title of 2nd Book\", function() {                            \r",
							"    pm.expect(json[1].title).to.eql(\"Book 2\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Verify description of 2nd Book\", function() {                            \r",
							"    pm.expect(json[1].description).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// #7\r",
							"pm.test(\"Verify Page Count of 2nd Book\", function () {\r",
							"    pm.expect(json[1].pageCount).to.equal(200);\r",
							"});\r",
							"\r",
							"// #8\r",
							"pm.test(\"Verify excerpt of 2nd Book\", function() {                            \r",
							"    pm.expect(json[1].excerpt).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"// #9\r",
							"pm.test(\"Verify Date of 2nd Book has a correct format\", function () {\r",
							"    pm.expect(json[1].publishDate).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{7}\\+\\d{2}:\\d{2}$/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - All CoverPhotos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json = pm.response.json();\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Verify id of 2nd CoverPhoto\", function() {                            \r",
							"    pm.expect(json[1].id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// #5\r",
							"pm.test(\"Verify Book id of 2nd CoverPhoto\", function() {                            \r",
							"    pm.expect(json[1].idBook).to.eql(2);\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Verify url of 2nd CoverPhoto\", function() {                            \r",
							"    pm.expect(json[1].url).to.be.a(\"string\");\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - All Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Users\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Verify id of 2nd User\", function() {                            \r",
							"    pm.expect(json[1].id).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"// #5\r",
							"pm.test(\"Verify userName of 2nd User\", function() {                            \r",
							"    pm.expect(json[1].userName).to.eql(\"User 2\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Verify password of 2nd User\", function() {                            \r",
							"    pm.expect(json[1].password).to.eql(\"Password2\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - New Activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Activities\");\r",
							"\r",
							"pm.environment.set(\"id\", \"600\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New Activity\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":600,\r",
							"        \"title\":\"Exercise\",\r",
							"        \"dueDate\":\"2021-05-24T07:03:37.191Z\",\r",
							"        \"completed\":true}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"title\": {{activityTitle}},\r\n  \"dueDate\": {{dueDate}},\r\n  \"completed\": {{activityCompleted}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Activities\");\r",
							"\r",
							"pm.environment.set(\"id\", \"10\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Activity 10 id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(10);\r",
							"});\r",
							"\r",
							"// #5\r",
							"pm.test(\"Should include Activity 10 title\", function () {\r",
							"    pm.expect(jsonData.title).to.include(\"Activity 10\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Should include Activity 10 completed\", function () {\r",
							"    pm.expect(jsonData.completed).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - Change Activity 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Activities\");\r",
							"\r",
							"pm.environment.set(\"id\", \"10\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Activity 10 id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(10);\r",
							"});\r",
							"\r",
							"// #5\r",
							"pm.test(\"Should include Activity 10 title\", function () {\r",
							"    pm.expect(jsonData.title).to.include(\"Exercise\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Should include Activity 10 completed\", function () {\r",
							"    pm.expect(jsonData.completed).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"title\": {{activityTitle}},\r\n  \"dueDate\": {{dueDate}},\r\n  \"completed\": {{activityCompleted}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Remove Activity 5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Activities\");\r",
							"\r",
							"pm.environment.set(\"id\", \"5\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #2\r",
							"pm.test(\"Check for no response body\", function () {\r",
							"    var res = (_.isEmpty(pm.response.body));\r",
							"    pm.expect(res).to.be.true\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - New Author",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors\");\r",
							"\r",
							"pm.environment.set(\"id\", \"600\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New Author\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":600,\r",
							"        \"idBook\":600,\r",
							"        \"firstName\":\"George\",\r",
							"        \"lastName\":\"Washington\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{id}},\r\n  \"firstName\": {{firstName}},\r\n  \"lastName\": {{lastName}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Author(s) That Published Book 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors/authors/books\");\r",
							"\r",
							"pm.environment.set(\"id\", \"3\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include List of Authors\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Author 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors\");\r",
							"\r",
							"pm.environment.set(\"id\", \"1\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Author 1\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":1,\r",
							"        \"idBook\":1,\r",
							"        \"firstName\":\"First Name 1\",\r",
							"        \"lastName\":\"Last Name 1\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - Change Author 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors\");\r",
							"\r",
							"pm.environment.set(\"id\", \"3\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Updated Author 3\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":3,\r",
							"        \"idBook\":0,\r",
							"        \"firstName\":\"George\",\r",
							"        \"lastName\":\"Washington\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": 0,\r\n  \"firstName\": {{firstName}},\r\n  \"lastName\": {{lastName}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Remove Author 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Authors\");\r",
							"\r",
							"pm.environment.set(\"id\", \"2\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #2\r",
							"pm.test(\"Check for no response body\", function () {\r",
							"    var res = (_.isEmpty(pm.response.body));\r",
							"    pm.expect(res).to.be.true\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - New Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Books\");\r",
							"\r",
							"pm.environment.set(\"id\", \"600\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New Book\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":600,\r",
							"        \"title\":\"This is the book title\",\r",
							"        \"description\":\"This is the book description\",\r",
							"        \"pageCount\":150,\r",
							"        \"excerpt\":\"This is the book excerpt\",\r",
							"        \"publishDate\":\"2021-05-24T07:03:37.191Z\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"title\": {{bookTitle}},\r\n  \"description\": {{bookDescription}},\r\n  \"pageCount\": {{bookPageCount}},\r\n  \"excerpt\": {{bookExcerpt}},\r\n  \"publishDate\": {{dueDate}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Book 4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Books\");\r",
							"\r",
							"pm.environment.set(\"id\", \"4\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Book 4 id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(4);\r",
							"});\r",
							"\r",
							"// #5\r",
							"pm.test(\"Should include Book 4 title\", function () {\r",
							"    pm.expect(jsonData.title).to.include(\"Book 4\");\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Should include Book 4 page count\", function () {\r",
							"    pm.expect(jsonData.pageCount).to.eql(400);\r",
							"});\r",
							"\r",
							"// #7\r",
							"pm.test(\"Ensure Remaining Book 4 properties present\", function () {\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('excerpt');\r",
							"    pm.expect(jsonData).to.have.property('publishDate');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - Change Book 6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Books\");\r",
							"\r",
							"pm.environment.set(\"id\", 6);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Book 6 id\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(6);\r",
							"});\r",
							"\r",
							"// #5\r",
							"pm.test(\"Should include Book 6 page count\", function () {\r",
							"    pm.expect(jsonData.pageCount).to.eql(600);\r",
							"});\r",
							"\r",
							"// #6\r",
							"pm.test(\"Ensure Remaining Book 6 properties present\", function () {\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('excerpt');\r",
							"    pm.expect(jsonData).to.have.property('publishDate');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"title\": {{bookTitle}},\r\n  \"description\": {{bookDescription}},\r\n  \"pageCount\":600,\r\n  \"excerpt\":{{bookExcerpt}},\r\n  \"publishDate\":{{dueDate}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Book 7",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Books\");\r",
							"\r",
							"pm.environment.set(\"id\", \"7\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #2\r",
							"pm.test(\"Check for no response body\", function () {\r",
							"    var res = (_.isEmpty(pm.response.body));\r",
							"    pm.expect(res).to.be.true\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - New CoverPhoto",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos\");\r",
							"\r",
							"pm.environment.set(\"id\", \"600\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New Cover Photo\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":600,\r",
							"        \"idBook\":600,\r",
							"        \"url\":\"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 600&w=250&h=350\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{id}},\r\n  \"url\": {{coverPhotoURL}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - All Cover Photos for Book 9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos/books/covers\");\r",
							"\r",
							"pm.environment.set(\"id\", \"9\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include List of Books\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Cover Photo 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos\");\r",
							"\r",
							"pm.environment.set(\"id\", \"10\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Cover Photo 10\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":10,\r",
							"        \"idBook\":10,\r",
							"        \"url\":\"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 10&w=250&h=350\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - Change Cover Photo 11",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos\");\r",
							"\r",
							"pm.environment.set(\"id\", \"11\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include Changed Cover Photo\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":11,\r",
							"        \"idBook\":11,\r",
							"        \"url\":\"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 600&w=250&h=350\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{id}},\r\n  \"url\": {{coverPhotoURL}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Cover Photo 12",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"CoverPhotos\");\r",
							"\r",
							"pm.environment.set(\"id\", \"12\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #2\r",
							"pm.test(\"Check for no response body\", function () {\r",
							"    var res = (_.isEmpty(pm.response.body));\r",
							"    pm.expect(res).to.be.true\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - New User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Users\");\r",
							"\r",
							"pm.environment.set(\"id\", \"600\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New User\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":600,\r",
							"        \"userName\":\"administrator\",\r",
							"        \"password\":\"PassswooorD!\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"userName\": {{userName}},\r\n  \"password\": {{userPassword}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - User 8",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Users\");\r",
							"\r",
							"pm.environment.set(\"id\", \"8\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include User 8\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":8,\r",
							"        \"userName\":\"User 8\",\r",
							"        \"password\":\"Password8\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - User 9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Users\");\r",
							"\r",
							"pm.environment.set(\"id\", \"9\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// #1\r",
							"pm.test(\"Response body is present\", function() {                             \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"// #2\r",
							"pm.test(\"Response body is a valid json\", function() {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"// #3\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #4\r",
							"pm.test(\"Should include New User\", function () {\r",
							"    var expectedObject = {\r",
							"        \"id\":9,\r",
							"        \"userName\":\"administrator\",\r",
							"        \"password\":\"PassswooorD!\"}\r",
							"    pm.expect(jsonData).to.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{id}},\r\n  \"userName\": {{userName}},\r\n  \"password\": {{userPassword}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - User 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"service\", \"Users\");\r",
							"\r",
							"pm.environment.set(\"id\", \"10\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// #2\r",
							"pm.test(\"Check for no response body\", function () {\r",
							"    var res = (_.isEmpty(pm.response.body));\r",
							"    pm.expect(res).to.be.true\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{service}}/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{service}}",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "path",
			"value": "api/v1"
		}
	]
}