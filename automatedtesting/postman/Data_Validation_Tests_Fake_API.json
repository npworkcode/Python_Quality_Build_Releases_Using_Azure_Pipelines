{
	"info": {
		"_postman_id": "4ffaa235-40c7-41fa-ac71-ca4dea2ba65b",
		"name": "Azure_FakeRESTApi_Data_Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get 1st User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"path\", \"api/v1/Users\");\r",
							"pm.collectionVariables.set(\"userid\", 1);\r",
							"pm.collectionVariables.set(\"userName\", \"User 1\");\r",
							"pm.collectionVariables.set(\"password\", \"Password1\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//#1\r",
							"pm.test(\"Successful response\", function () {                        \r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"var json = pm.response.json();\r",
							"pm.collectionVariables.set(\"id\", json.id);\r",
							"\r",
							"\r",
							"//#2\r",
							"pm.test(\"Content-Type header is present\", function () {                \r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//#3\r",
							"pm.test(\"Content-Type is application/json\", function () {            \r",
							"    pm.expect(postman.getResponseHeader(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"//#4\r",
							"pm.test(\"Response body is present\", function (){                              \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"//#5\r",
							"pm.test(\"Response body is a valid json\", function () {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"//#6\r",
							"pm.test(\"User ID: value is correct\", function () {                             \r",
							"    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"userid\"));\r",
							"});\r",
							"\r",
							"//#7\r",
							"pm.test(\"username: value is correct\", function () {                             \r",
							"    pm.expect(json.userName).to.eql(pm.collectionVariables.get(\"userName\"));\r",
							"});\r",
							"\r",
							"//#8\r",
							"pm.test(\"password: value is correct\", function () {                             \r",
							"    pm.expect(json.password).to.eql(pm.collectionVariables.get(\"password\"));\r",
							"});\r",
							"\r",
							"//#9\r",
							"pm.test(\"Status code returned is 200\", function() {                       \r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/{{path}}/{{userid}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{userid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get 1st Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"path\", \"api/v1/Books\");\r",
							"pm.collectionVariables.set(\"bookid\", 1);\r",
							"pm.collectionVariables.set(\"title\", \"Book 1\");\r",
							"pm.collectionVariables.set(\"pagecount\", 100);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//#1\r",
							"pm.test(\"Successful response\", function () {                        \r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"var json = pm.response.json();\r",
							"pm.collectionVariables.set(\"id\", json.id);\r",
							"\r",
							"\r",
							"//#2\r",
							"pm.test(\"Content-Type header is present\", function () {                \r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//#3\r",
							"pm.test(\"Content-Type is application/json\", function () {            \r",
							"    pm.expect(postman.getResponseHeader(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"//#4\r",
							"pm.test(\"Response body is present\", function (){                              \r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"//#5\r",
							"pm.test(\"Response body is a valid json\", function () {               \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"//#6\r",
							"pm.test(\"Book ID: value is correct\", function () {                             \r",
							"    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"bookid\"));\r",
							"});\r",
							"\r",
							"//#7\r",
							"pm.test(\"Book Title: value is correct\", function () {                             \r",
							"    pm.expect(json.title).to.eql(pm.collectionVariables.get(\"booktitle\"));\r",
							"});\r",
							"\r",
							"//#8\r",
							"pm.test(\"Book Page Count: value is correct\", function () {                             \r",
							"    pm.expect(json.pageCount).to.eql(pm.collectionVariables.get(\"pagecount\"));\r",
							"});\r",
							"\r",
							"//#9\r",
							"pm.test(\"Status code returned is 200\", function() {                       \r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{path}}/{{bookid}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{path}}",
						"{{bookid}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "path",
			"value": "api/v1/Users"
		},
		{
			"key": "userid",
			"value": "1"
		},
		{
			"key": "bookid",
			"value": "1"
		},
		{
			"key": "userName",
			"value": "john"
		},
		{
			"key": "password",
			"value": "password12345"
		},
		{
			"key": "booktitle",
			"value": "Book 1"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "pagecount",
			"value": "100"
		},
		{
			"key": "title",
			"value": ""
		}
	]
}